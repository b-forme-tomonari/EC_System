#ワークフローの名前
name: Java CI with Gradle

#メインブランチがプッシュされたときに実行される
on:
  push:
    branches: [ "master" ]

#リポジトリの権限
permissions:
  contents: read
#一つのジョブ定義ごとに一つのコンテナが用意される
jobs:
  #ジョブの定義名
  build:
    #ランナーの選択(実行環境のOS)
    runs-on: ubuntu-latest
    services:  
      mysql:  
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ec_sys
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          REDIS_HOST: ${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT: 6379  
          REDIS_PASSWORD: root

    steps:
    #Githubに登録されているリポジトリをチェックアウトする
    - uses: actions/checkout@v3
    
    #Java 17の環境を構築(インストール)
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
  
    #Gradleのバッチに実行権限付与(デフォルトでは実行権限がない)
    - name: Make Gradle executable
      run: chmod +x ./gradlew

    #ビルドして単体テストレポート出力(Jacoco)
    - name: Build with Gradle(Jacoco)
      run: ./gradlew build jacocoTestReport  
      
    #ビルドして単体テストレポート出力(Jacoco)
    - name: Build with Gradle(Jacoco)
      run: ./gradlew build jacocoTestReport

    #ユニットテスト結果をGitHubにアップロードする
    - name: Archive unit test results
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-report
        path: build/reports/tests/test

    # カバレッジレポート(Jacoco)をGitHubにアップロードする
    - name: Archive coverage results
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: build/reports/jacoco/test/html
